#ifndef MATH_OPS_H
#define MATH_OPS_H

/*functions*/

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//! Основная функция для оптимизированного решения квадратного уравнения общего вида
//!
//! @param coef_a (double)  старший коэффициент уравнения
//! @param coef_b (double)  второй коэффициент уравнения
//! @param coef_c (double)  свободный член уравнения
//! @param ans_x1 (double*) указатель на первый корень
//! @param ans_x2 (double*) указатель на второй корень
//! @param nRoots (int*)    указатель на количество корней
//! 
//! @par          Анализирует коэффициенты уравнения и в зависимости от этого использует:
//!               функцию для решения линейных уравнений (solve_lin) или квадратных (solve_quadr)
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    void general_solve(double coef_a,  double coef_b, double coef_c,
                       double* ans_x1, double* ans_x2, 
                       int* nRoots);

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------              
//! Решает линейные уравнения
//!
//! @param coef_b (double)  второй коэффициент уравнения
//! @param coef_c (double)  свободный член уравнения
//! @param ans_x1 (double*) указатель на первый корень
//! 
//! @par          Возвращает количество решений уравнения
//!
//! @return       INF_ROOTS = -1, если уравнение имеет бесконечное число корней
//! @return       NO_ROOTS  = 0,  если уравнение не имеет корней
//! @return       ONE_ROOT  = 1,  если уравнение имеет один корень
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    int solve_lin(double coef_b, double coef_c, double* ans_x1);     // solve_lin: solves liner equations & returns nRoots

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//! Решает квадратные уравнения
//!
//! @param coef_a (double)  старший коэффициент уравнения
//! @param coef_b (double)  второй коэффициент уравнения
//! @param coef_c (double)  свободный член уравнения
//! @param ans_x1 (double*) указатель на первый корень
//! @param ans_x2 (double*) указатель на второй корень
//!
//! @par           Возвращает количество решений уравнения
//!
//! @return       NO_ROOTS  = 0,  если уравнение не имеет корней
//! @return       ONE_ROOT  = 1,  если уравнение имеет один корень
//! @return       TWO_ROOTS = 2,  если уравнение имеет два корня
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    int solve_quadr(double coef_a,  double coef_b, double coef_c,    // solve_quadr: solves quadratic equations & returns nRoots
                    double* ans_x1, double* ans_x2);             

#endif