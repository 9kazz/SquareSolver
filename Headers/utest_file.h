#ifndef UTEST_FILE_H
#define UTEST_FILE_H

#include <stdio.h>

/*functions*/

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------
//! Основная функция unit-тестирования для general_solve (решений квадратного уравнений)
//!
//! @par    Читает имя файла с тестировочными данным из ввода,
//!         запускает серию тестов и печатает количество успешно пройденных тестов и номера непройденных тестов
//!
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------
    void utest_main_file (char file_name[]);

//-----------------------------------------------------------------------------------------------------------------------------------------------------
//! Считывает данные из тестирующего файла
//!
//! @param fp_utest   (FILE*) указатель на тестирующий файл
//! @param coef_a     (double*) указатель на старший коэффициент уравнения
//! @param coef_b     (double*) указатель на второй коэффициент уравнения
//! @param coef_c     (double*) указатель на свободный член уравнения
//! @param nRoots_ref (int*) указатель на эталонное количество корней
//! @param ans_x1_ref (double*) указатель на эталонный первый корень
//! @param ans_x2_ref (double*) указатель на эталонный второй корень
//!
//! @par              Пробует прочитать файл и, в случае успеха, присваивает значения коэффициентам, 
//!                   эталонному количеству корней и эталонным корням
//! 
//! @return           READ_SUCCESS = 1, если файл прочитан успешно
//! @return           READ_FAIL    = 0, если файл не прочитан
//------------------------------------------------------------------------------------------------------------------------------------------------------
    int utest_input_file(FILE* fp_utest,
                        double* coef_a,     double* coef_b,     double* coef_c,
                        int* nRoots_ref,
                        double* ans_x1_ref, double* ans_x2_ref);
    
//----------------------------------------------------------------------------------------------------------------------------------------------------
//! Сравнивает полученные с помощью general_solve корни и их количество с эталонными значениями
//!
//! @param nRoots_ref (int) эталонное значение количества корней
//! @param ans_x1_ref (double) эталонный первый корень
//! @param ans_x2_ref (double) эталонный второй корень
//! @param nRoots     (int) эталонное количество корней
//! @param ans_x1     (double) эталонный первый корень
//! @param ans_x2     (double) эталонный второй корень
//!
//! @par              Выполняет один тест: сначала сравнивает количество корней,
//!                   а потом переходит к сравнению самих корней
//!
//! @return           CHECK_SUCCESS = 1, если тест пройден успешно
//! @return           CHECK_FAIL    = 0, если тест не пройден
//----------------------------------------------------------------------------------------------------------------------------------------------------
    int utest_checking_file (int nRoots_ref, double ans_x1_ref,  double ans_x2_ref,
                             int nRoots,     double ans_x1,      double and_x2);


/*enums*/

//----------------------------------------------------------------------------------------------------------------------------------------------------                             
//! Описывает статусы чтения тестирующего файла
//----------------------------------------------------------------------------------------------------------------------------------------------------
        enum reading_file_result {
            READ_SUCCESS   = 1,         ///< Файл успешно прочитан
            READ_FAIL      = 0          ///< Файл не прочитан
        };

//----------------------------------------------------------------------------------------------------------------------------------------------------                             
//! Описывает статусы тестировки алгоритмов
//----------------------------------------------------------------------------------------------------------------------------------------------------    
        enum checking_file_result {
            CHECK_SUCCESS   = 1,        ///< Тест пройден 
            CHECK_FAIL      = 0         ///< Тест не пройден
        };

/*constants*/

//----------------------------------------------------------------------------------------------------------------------------------------------------                             
//! Значение максимальной длины имени тестирующего файла
//----------------------------------------------------------------------------------------------------------------------------------------------------            

    const int MAX_LINE = 1000;

#endif